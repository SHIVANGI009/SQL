use sakila;

select * from payment;

select payment_id,customer_id,amount,
sum(amount) over(partition by customer_id),
rank() 
      over(partition by customer_id order by amount desc) as rank1,
dense_rank() 
      over(partition by customer_id order by amount desc) as drank1
from sakila.payment;

select * from
(select payment_id,customer_id,amount,
dense_rank() 
      over(order by amount desc) as drank1
from sakila.payment) as tab
where drank1 = 3;

CREATE TABLE ALPHA(ID INT,NAME1 VARCHAR(21) );
INSERT INTO ALPHA VALUES(1,'ABC');
INSERT INTO ALPHA(ID) VALUES(2);
INSERT INTO ALPHA(NAME1) VALUES('EFG');

SELECT * FROM ALPHA;

UPDATE ALPHA SET NAME1='SHIVANGI'
WHERE ID=1;

DELETE FROM ALPHA
WHERE ID=2;

-- DML : INSERT,UPDATE,DELETE
-- DDL : DROP,TRUNCATE
DROP TABLE ALPHA;

-- DIFFER B/W DROP(CANNOT ROLLBACK) AND TRUNCATE(DELETE DATA AND ALSO TABLE BUT IT CAN RECREATE THE SCHEMA AND CANNOT ROLLBACK) AND DELETE(CAN ROLLBACK)

-- A constraint in SQL means applying a rule on a column to keep the data correct, valid, and consistent. 
-- PRIMARY KEY,CANDIDATE KEY,SUPER KEY
-- PRIMARY KEY AND UNIQUE KEY DIFFER
-- PRIMARY KEY AND FORIEGN KEY
-- GROUP BY AND WINDOW FUNCTION DIFFER
-- TYPES OF SQL SUBQUERIES

CREATE TABLE XYZ1(DOB DATETIME DEFAULT NOW() );
INSERT INTO XYZ1 VALUES ('2024-10-09');
INSERT INTO XYZ1() VALUES();

SELECT * FROM XYZ1;

-- CREATE TABLE ADMISSION COLUMN ID,COLLEGE NAME AND STUDENT ID
CREATE TABLE ADMISSION (ID INT PRIMARY KEY,STUDENT_ID INT UNIQUE,COLLEGE_NAME VARCHAR(51) NOT NULL,FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID) );
INSERT INTO ADMISSION VALUES();

CREATE TABLE STUDENTS (STUDENT_ID INT PRIMARY KEY,STUDENT_NAME VARCHAR(51) NOT NULL);
INSERT INTO STUDENTS VALUES(11,'JOHN'),(12,'MAX'),(13,'JOE');
SELECT * FROM STUDENTS;

DROP TABLE ADMISSION;

CREATE TABLE STUDENTS1(STUDENTID INT PRIMARY KEY,SNAME VARCHAR(21),AGE INT,GRADE INT,CITY VARCHAR(21) );
CREATE TABLE MARKS(STUDENTID INT,SUBJECT1 VARCHAR(21),MARKS INT,FOREIGN KEY (STUDENTID) REFERENCES STUDENTS1(STUDENTID) );


CREATE TABLE TEST99 AS 
      SELECT ACTOR_ID,FIRST_NAME FROM ACTOR;
      
SELECT * FROM TEST99;

-- DELETE THAT ACTOR_ID WHOSE ACTOR_ID IS SAME AS THAT OF A FRIST_NAME = PENELOPE
CREATE TABLE TEST11 AS 
         SELECT * FROM TEST99 WHERE FIRST_NAME != 'PENELOPE';

SELECT * FROM TEST11;

-- COPY OF A TABLE , UPDATE THE AMOUNT DONE BY CUSTOMER ID 1 AS WITH THE SAME AMOUNT DONE BY THE CUSTOMER FOR PAYMENT ID 2
SELECT * FROM PAYMENT;
CREATE TABLE PAY1 AS 
       SELECT PAYMENT_ID,CUSTOMER_ID,AMOUNT FROM PAYMENT;
       
SELECT * FROM PAY1;

UPDATE PAY1
SET AMOUNT=(SELECT AMOUNT FROM PAYMENT WHERE PAYMENT_ID=2) WHERE CUSTOMER_ID=1;


